View(iris)
unique(iris$Species)
install.packages(c("GGally", "ggplot2"))
ggpairs(iris, mapping=ggplot2::aes(colour = Species))
library(GGally)
library(GGally)
ggpairs(iris, mapping=ggplot2::aes(colour = Species))
install.packages(c("shiny","leaflet"))
install.packages(c("shiny", "leaflet"))
install.packages(c("shiny", "leaflet"))
install.packages(c("shiny", "leaflet"))
install.packages(c("shiny", "leaflet"))
install.packages(c("shiny","leaflet"))
install.packages(c("shiny", "leaflet"))
install.packages(c("shiny", "leaflet"))
install.packages(c("shiny", "leaflet"))
shinyApp(ui, server)
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shiny(ui, server)
install.packages(c("shiny","leaflet"))
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
Appshiny(ui, server)
shiny App(ui, server)
shinyapp(ui, server)
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
shinyApp(ui,server)
shinyApp(ui)
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
install.packages(c("askpass", "backports", "BH", "bit", "bit64", "blob", "caTools", "cli", "clipr", "curl", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "generics", "haven", "hms", "htmlwidgets", "httr", "jsonlite", "knitr", "magrittr", "markdown", "mime", "mongolite", "odbc", "openssl", "pillar", "pkgconfig", "PKI", "prettyunits", "profvis", "progress", "purrr", "R6", "Rcpp", "RCurl", "readr", "rJava", "RJDBC", "RJSONIO", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "sparklyr", "stringi", "sys", "tibble", "tidyr", "tidyselect", "tinytex", "withr", "xfun", "xml2", "yaml"))
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
install.packages(c("shiny","leaflet"))
install.packages(c("shiny", "leaflet"))
shinyApp(ui, server)
# Set working directory
x<- "C:\Users\jcgss\OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023"
dy<-replace(x,"\","/")
setwd("C:\Users\jcgss\OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023")
# Set working directory
x<- "C:\Users\jcgss\OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023"
# Set working directory
x<- "C:/Users\jcgss\OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023"
# Set working directory
x<- "C:/Users/jcgss\OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023"
# Set working directory
x<- ("C:/Users/jcgss\OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023")
# Set working directory
x<-("C://Users/jcgss/OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023")
# Set working directory
x<-("C:\\Users\jcgss/OneDrive\Desktop\Master of Economics\Sem1\Econ 6067 2pm to 5pm Tuesday CP4- LTA\Final Project\1023")
# Set working directory
setwd("C:/Users/jcgss/OneDrive/Desktop/Master of Economics/Sem1/Econ 6067 2pm to 5pm Tuesday CP4- LTA/Final Project/1023")
load(file = "airavg.RData")
View(airavg)
View(airavg)
file
file
df<- load(file = "airavg.RData")
load(file = "airavg.RData")
df<-data.frame(file)
df<-data.frame(load(file = "airavg.RData"))
View(df)
df<-data.frame(file = "airavg.RData")
df<- load(file = "airavg.RData")
View(airavg)
df<-
write.csv(airavg, "C:/Users/jcgss/OneDrive/Desktop/Master of Economics/Sem1/Econ 6067 2pm to 5pm Tuesday CP4- LTA/Final Project/1023/airavg.csv", row.names=FALSE)
